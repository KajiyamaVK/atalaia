generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String? // Optional for OAuth users
  salt          String? // Optional for OAuth users
  image         String? // User avatar URL
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OAuth fields
  accounts Account[]
  sessions Session[]

  // Relations
  subjects Subject[]
  cards    Card[]
  reviews  Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subCategory SubCategory[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String? // Optional color for UI
  icon        String? // Optional icon for UI
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Subject  Subject[]

  @@map("sub_categories")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId        String
  subCategoryId String?

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])

  @@map("subjects")
}

model Card {
  id        String   @id @default(cuid())
  front     String // Question/Term
  back      String // Answer/Definition
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Spaced Repetition Algorithm fields (SM-2)
  easeFactor   Float     @default(2.5) // Ease factor for SM-2 algorithm
  interval     Int       @default(1) // Days until next review
  repetitions  Int       @default(0) // Number of successful repetitions
  nextReviewAt DateTime  @default(now()) // When the card should be reviewed next
  lastReviewAt DateTime? // When the card was last reviewed

  // Foreign Keys
  userId    String
  subjectId String

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  reviews Review[]

  @@map("cards")
}

model Review {
  id        String   @id @default(cuid())
  quality   Int // Quality of recall (0-5 for SM-2 algorithm)
  createdAt DateTime @default(now())

  // Time taken to answer (optional, for analytics)
  timeSpent Int? // in seconds

  // Foreign Keys
  userId String
  cardId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
